## Main
# main
snippet main
	int
	main(int argc, const char *argv[])
	{
		${0}

		return 0;
	}
# main(void)
snippet mainv
	int
	main(void)
	{
		${0}

		return 0;
	}
## Preprocessor
# #include <...>
snippet inc
	#include <${1:stdio}.h>
# #include "..."
snippet Inc
	#include "${1:`Filename("$1.h")`}"
# ifndef...define...endif
snippet ndef
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif
# define
snippet def
	#define ${1:FOO} ${2:BAR}
# ifdef...endif
snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif
# if
snippet #if
	#if ${1:FOO}
		${0}
	#endif
# header include guard
snippet once
	#ifndef ${1:`toupper(Filename('$1_H', 'UNTITLED_H'))`}
	#define $1

	${0}

	#endif /* $1 */
## Control Statements
# if
snippet if
	if (${1:/* condition */}) {
		${2}
	}
# else
snippet el
	else {
		${1}
	}
# else if
snippet elif
	else if (${1:/* condition */}) {
		${2}
	}
# ifi
snippet ifi
	if (${1:/* condition */}) ${2};
# ternary
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch (${1:/* variable */}) {
	case ${2:/* variable case */}:
		${3}
		${4:break;}${5}
	default:
		${6}
	}
# switch without default
snippet switchndef
	switch (${1:/* variable */}) {
	case ${2:/* variable case */}:
		${3}
		${4:break;}${5}
	}
# case
snippet case
	case ${1:/* variable case */}:
		${2}
		${3:break;}
## Loops
# for
snippet for
	for (${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
		${4}
	}
# for (custom)
snippet forr
	for (${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++}) {
		${5}
	}
# while
snippet wh
	while (${1:/* condition */}) {
		${2}
	}
# do... while
snippet do
	do {
		${2}
	} while (${1:/* condition */});
## Functions
# function definition
snippet fun
	${1:void}
	${2:function_name}(${3})
	{
		${4}
	}
# function declaration
snippet fund
	${1:void} ${2:function_name}(${3});
## Types

# typedef
snippet td
	typedef ${1:int} ${2:MyCustomType};
# struct
snippet st
	struct ${1:`vim_snippets#Filename('$1_t', 'name')`} {
		${2:/* data */}
	}${3: /* optional variable list */};
# typedef struct
snippet tds
	typedef struct ${2:_$1 }{
		${3:/* data */}
	} ${1:`vim_snippets#Filename('$1_t', 'name')`};
# typedef enum
snippet tde
	typedef enum {
		${1:/* data */}
	} ${2:foo};
## Input/Output
# printf
snippet pr
	printf("${1:%s}\n"${2});
# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr
	fprintf(${1:stderr}, "${2:%s}\n"${3});
## Miscellaneous
# BSD 3-clause
snippet bsd3
	/*
	 * Copyright (c) `strftime("%Y")`, ${1:Author} All rights reserved.
	 * 
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions
	 * are met:
	 * 
	 * 1. Redistributions of source code must retain the above copyright
	 *    notice, this list of conditions and the following disclaimer.
	 * 
	 * 2. Redistributions in binary form must reproduce the above copyright
	 *    notice, this list of conditions and the following disclaimer in
	 *    the documentation and/or other materials provided with the
	 *    distribution.
	 * 
	 * 3. Neither the name of the copyright holder nor the names of its
	 *    contributors may be used to endorse or promote products derived
	 *    from this software without specific prior written permission.
	 * 
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
	 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
	 * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
	 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
	 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
	 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
	 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 * POSSIBILITY OF SUCH DAMAGE.
	*/
