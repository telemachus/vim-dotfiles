# Snippets for go, mostly from vim-go

global !p

import re


# Thanks to https://github.com/fatih/vim-go/
# Automatically wrap multiple return values in parentheses
def return_values(s):
  s = re.sub("\(.*?\)|\([^)]*$", "", s)
  return len(s.split(","))


def opening_par(snip, pos):
  if return_values(t[pos]) > 1 and not t[pos].startswith("("):
    snip.rv = "("
  else:
    snip.rv = ""


def closing_par(snip, pos):
  if return_values(t[pos]) > 1:
    snip.rv = ")"
  else:
    snip.rv = ""


# Thanks to https://vi.stackexchange.com/a/26882/7933
# Endless imports
def delline_exitimport(snip):
  cursorline = snip.cursor[0]
  del snip.buffer[cursorline]

  # Add a blank line after import.
  # NB: cursorline + 1 is the current line number.
  snip.buffer.append("\n", cursorline+1)

  # Place cursor on blank line after import.
  snip.cursor.set(cursorline+1, 0)


def in_import(snip):
  # Get position using searchpairpos('import (','',')','bnWz')
  beginpos = vim.eval("searchpairpos('^import (','','^)','bnWz')")
  endpos = vim.eval("searchpairpos('^import','','^)', 'nWz')")
  curpos = snip.cursor.to_vim_cursor()
  if beginpos == ['0','0'] or endpos == ['0','0']: return False
  if pos_comp(beginpos, curpos) < 0 and pos_comp(curpos, endpos) < 0:
    return True
  else:
    return False

def pos_comp(cur1, cur2):
  # Returns -1 if cur1 is before cur2, +1 if cur1 is after cur2, and 0 if
  # cur1 == cur2. cur1 and cur2 are lists of the form [row, col].
  cur1r = int(cur1[0])
  cur1c = int(cur1[1])
  cur2r = int(cur2[0])
  cur2c = int(cur2[1])
  if cur1r < cur2r: return -1
  elif cur1r > cur2r: return  1
  else:
    if cur1c < cur2c: return -1
    elif cur1c > cur2c: return  1
    else: return 0

endglobal

# package {main}
snippet pkg "package {main}"
package ${1:main}
${0}
endsnippet

# shorthand variable declaration
snippet : "v := value"
${1} := ${0}
endsnippet

# full variable declaration
snippet var "var name type = expression"
var ${1:name}${2/(.+)/ /}${2:type} = ${3:exp}
endsnippet

# defer
snippet df "defer someFunction()"
defer ${1:func}(${2})
${0}
endsnippet

snippet fmt "import fmt" b
import "fmt"${0}
endsnippet

# import
context "not in_import(snip)"
snippet import "import ( ... )"
import (
	"$1"
)
endsnippet

context "in_import(snip)"
snippet "^	\"\S+$" "create next import" r
`!p snip.rv=match.group(0)`"
	"${1}
endsnippet

context "in_import(snip)"
post_jump "delline_exitimport(snip)"
snippet "^	\"$" "exit import" r
endsnippet

# for loop
snippet for "for ... { ... }"
for ${1} {
	${2:${VISUAL}}
}${0}
endsnippet

# for integer loop
snippet fori "for 0..N-1 { ... }"
for ${1:i} := 0; $1 < ${2:N}; $1++ {
	${3:${VISUAL}}
}${0}
endsnippet

# for range loop
snippet forr "for k, v := range items { ... }"
for ${2:k}, ${3:v} := range ${1} {
	${4:${VISUAL}}
}${0}
endsnippet

# map
snippet map "map[Type]Type"
map[${1:string}]${2:int}${0}
endsnippet

# main()
snippet main "func main() { ... }"
func main() {
	${0:${VISUAL}}
}
endsnippet

# I took these from https://github.com/honza/vim-snippets.
#
# Whoever wrote that converted several from
# https://github.com/AlanQuatermain/go-tmbundle
snippet /^cons/ "constants declaration" r
const (
	${1:constant}${2/(.+)/ /}${2:type} = ${0:value}
)
endsnippet

snippet /^con/ "constant declaration" r
const ${1:name}${2/(.+)/ /}${2:type} = ${0:value}
endsnippet

snippet iota "iota constant generator" b
const (
	${1:constant}${2/(.+)/ /}${2:type} = iota
)
endsnippet

snippet if "if statement" b
if ${1:condition}${1/(.+)/ /}{
	${2:${VISUAL}}
}${0}
endsnippet

snippet switch "Switch statement" b
switch ${1:expression}${1/(.+)/ /}{
case$0
}
endsnippet

snippet struct "struct declaration" b
type ${1:name} struct {
	${2:${VISUAL}}
}${0}
endsnippet

snippet func "func Function(...) [error] { ... }"
func ${1:name}(${2:params})${3/(.+)/ /}`!p opening_par(snip, 3)`$3`!p closing_par(snip, 3)` {
	${0:${VISUAL}}
}
endsnippet

snippet meth "func (self Type) Method(...) [error] { ... }"
func (${1:receiver} ${2:type}) ${3:name}(${4:params})${5/(.+)/ /}`!p opening_par(snip, 5)`$5`!p closing_par(snip, 5)` {
	${0:${VISUAL}}
}
endsnippet

# error handling
snippet err "simple error handling" b
if err != nil {
	${1:FIXME}
}${0}
endsnippet

# if with inline error
snippet ife "if with inline error"
if err := ${1:condition}; err != nil {
	${2:${VISUAL}}
}${0}
endsnippet

# if with inline error and t.Fatalf
snippet iferrtf "if err: = <something>; err != nil { t.Fatalf }"
if err := ${1:condition}; err != nil {
	t.Fatalf(${2})
}${0}
endsnippet

# test function
snippet test "func TestXYZ(t *testing.T) { ... }"
func Test${1:Function}(t *testing.T) {
	${2:${VISUAL}}
}${0}
endsnippet

# vim:ft=snippets:
