# Snippets for go, mostly from vim-go

global !p

import re


# Thanks to https://github.com/fatih/vim-go/
# Automatically wrap multiple return values in parentheses
def return_values(s):
  s = re.sub("\(.*?\)|\([^)]*$", "", s)
  return len(s.split(","))


def opening_par(snip, pos):
  if return_values(t[pos]) > 1 and not t[pos].startswith("("):
    snip.rv = "("
  else:
    snip.rv = ""


def closing_par(snip, pos):
  if return_values(t[pos]) > 1:
    snip.rv = ")"
  else:
    snip.rv = ""


# Thanks to https://vi.stackexchange.com/a/26882/7933
# Endless imports
def delline_exitimport(snip):
  cursorline = snip.cursor[0]
  del snip.buffer[cursorline]

  # Add a blank line after import.
  # NB: cursorline + 1 is the current line number.
  snip.buffer.append("\n", cursorline+1)

  # Place cursor on blank line after import.
  snip.cursor.set(cursorline+1, 0)


def in_import(snip):
  # Get position using searchpairpos('import (','',')','bnWz')
  beginpos = vim.eval("searchpairpos('^import (','','^)','bnWz')")
  endpos = vim.eval("searchpairpos('^import','','^)', 'nWz')")
  curpos = snip.cursor.to_vim_cursor()
  if beginpos == ['0','0'] or endpos == ['0','0']: return False
  if pos_comp(beginpos, curpos) < 0 and pos_comp(curpos, endpos) < 0:
    return True
  else:
    return False

def pos_comp(cur1, cur2):
  # Returns -1 if cur1 is before cur2, +1 if cur1 is after cur2, and 0 if
  # cur1 == cur2. cur1 and cur2 are lists of the form [row, col].
  cur1r = int(cur1[0])
  cur1c = int(cur1[1])
  cur2r = int(cur2[0])
  cur2c = int(cur2[1])
  if cur1r < cur2r: return -1
  elif cur1r > cur2r: return  1
  else:
    if cur1c < cur2c: return -1
    elif cur1c > cur2c: return  1
    else: return 0

endglobal

# package {main}
snippet pkg "package {main}"
package ${1:main}
endsnippet

# shorthand variable declaration
snippet : "v := value"
$1 := $2
endsnippet

# full variable declaration
snippet var "var name type = expression"
var ${1:name}${2/(.+)/ /}${2:type} = ${3:exp}
endsnippet

# defer
snippet df "defer someFunction()"
defer ${1:func}(${2})
endsnippet

snippet fmt "import fmt" b
import "fmt"
endsnippet

# import
context "not in_import(snip)"
snippet import "import ( ... )"
import (
	"$1"
)
endsnippet

context "in_import(snip)"
snippet "^	\"\S+$" "create next import" r
`!p snip.rv=match.group(0)`"
	"${1}
endsnippet

context "in_import(snip)"
post_jump "delline_exitimport(snip)"
snippet "^	\"$" "exit import" r
endsnippet

# condition-only for loop (i.e., a while loop)
snippet while "for condition { ... }" b
for ${1:condition}${1/(.+)/ /}{
	${2:${VISUAL}}
}
endsnippet

# three-part for loop
snippet fori "for i = 0; i < N; i++ { ... }" b
for ${1:i} := ${2:0}; ${3:$1} < ${4:N}; ${5:$1++} {
	${6:${VISUAL}}
}
endsnippet

# for range loop
snippet forr "for index, value := range items { ... }" b
for ${2:index}, ${3:value} := range ${1} {
	${4:${VISUAL}}
}
endsnippet

# infinite for loop (i.e., while true)
snippet for "for { ... }" b
for {
	$1
}
endsnippet

# map
snippet map "map[Type]Type"
map[${1:string}]${2:int}
endsnippet

# main()
snippet main "func main() { ... }" b
func main() {
	${0:${VISUAL}}
}
endsnippet

# I took these from https://github.com/honza/vim-snippets.
#
# Whoever wrote that converted several from
# https://github.com/AlanQuatermain/go-tmbundle
snippet /^cons/ "constants declaration" r
const (
	${1:constant}${2/(.+)/ /}${2:type} = ${0:value}
)
endsnippet

snippet /^con/ "constant declaration" r
const ${1:name}${2/(.+)/ /}${2:type} = ${0:value}
endsnippet

snippet iota "iota constant generator" b
const (
	${1:constant}${2/(.+)/ /}${2:type} = iota
)
endsnippet

snippet if "if statement" b
if ${1:condition}${1/(.+)/ /}{
	${2:${VISUAL}}
}
endsnippet

snippet switch "switch statement" b
switch ${1:expression}${1/(.+)/ /}{
case $2
}
endsnippet

snippet struct "struct declaration" b
type ${1:name} struct {
	${2:${VISUAL}}
}
endsnippet

# define a function
snippet func "func name(...) [error] { ... }"
func ${1:name}(${2:params})${3/(.+)/ /}`!p opening_par(snip, 3)`$3`!p closing_par(snip, 3)` {
	${0:${VISUAL}}
}
endsnippet

# define a method
snippet meth "func (self Type) Method(...) [error] { ... }"
func (${1:receiver} ${2:type}) ${3:name}(${4:params})${5/(.+)/ /}`!p opening_par(snip, 5)`$5`!p closing_par(snip, 5)` {
	${0:${VISUAL}}
}
endsnippet

# assign an anonymous function to a variable
# (I need a better name here, but this is brief.)
snippet anon "name := func(...) [error] { ... }"
${1:name} := func(${2:params})${3/(.+)/ /}`!p opening_par(snip, 3)`$3`!p closing_par(snip, 3)` {
	${0:${VISUAL}}
}
endsnippet

# error handling
snippet err "simple error handling" b
if err != nil {
	${1:FIXME}
}
endsnippet

# if with inline error
snippet ife "if with inline error"
if err := ${1:condition}; err != nil {
	${2:${VISUAL}}
}
endsnippet

# if with inline error and t.Fatalf
snippet iferrtf "if err: = <something>; err != nil { t.Fatalf }"
if err := ${1:condition}; err != nil {
	t.Fatalf(${2})
}
endsnippet

# init()
snippet init "func init() { ... }" b
func init() {
	${1:${VISUAL}}
}
endsnippet

# test function
snippet test "func TestXYZ(t *testing.T) { ... }"
func Test${1:Something}(t *testing.T) {
	${2:${VISUAL}}
}
endsnippet

# write a helper function for tests
snippet testHelper "func Name(t testing.TB) { ... }"
func ${1:name}(t testing.TB) {
	${2:t.Helper()}
	${3:code}
}
endsnippet

# call t.Run with an anonymous function
snippet trun "t.Run(message, func(t *testing.T) { ... })"
t.Run(${1:"${2:message}"}, func(t *testing.T) {
	${3:${VISUAL}}
})
endsnippet

# call t.Run with a named function
snippet trunn "t.Run(message, functionName)"
t.Run(${1:"${2:message}"}, ${3:funcName})${0}
endsnippet

# benchmark function
snippet bench "func BenchmarkXYZ(b *testing.B) { ... }"
func Benchmark${1:Something}(b *testing.B) {
	for i := 0; i < b.N; i++ {
		${2:${VISUAL}}
	}
}
endsnippet

# expected != actual
snippet nexp "if actual != expected { t.Errorf(...) }"
if ${1:expected} != ${2:actual} {
	t.Errorf("expected %${3:q}; actual %${4:q}${5:; more}", $1, $2${6:, more})
}
endsnippet

# do something when a key is not present in a map
snippet nok "if <key>, ok := <map>[<value>]; !ok { ... }"
if ${1:key}, ok := ${2:map}[${3:value}]; !ok {
	${4}
}
endsnippet

# do something if a key is present in a map
snippet ok "if <key>, ok := <map>[<value>]; ok { ... }"
if ${1:key}, ok := ${2:map}[${3:value}]; ok {
	${4}
}
endsnippet

# vim:ft=snippets:
